[tool.poetry]
name = "xleapp"
version = "0.2.1"
description = "Multiplaform Logs, Events, And Plists Parser"
authors = ["Jesse Spangenberger <azuleonyx@digitalforensics.io>"]
license = "MIT"

readme = "README.md"

homepage = "https://github.com/flamusdiu/xleapp"
repository = "https://github.com/flamusdiu/xleapp"
documentation = "https://github.com/flamusdiu/xleapp"

keywords = ["forensics", "dfir", "security", "framework"]

classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Topic :: Security",
  "Topic :: Utilities",
  "Typing :: Typed"
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
click = "^8.1.7"
Jinja2 = "^3.1.3"
pillow = "^10.3.0"
prettytable = "^3.10.0"
PySimpleGUI = ">=4.60.4,<6.0.0"
python = ">=3.10,<3.13"
PyYAML = "^6.0.1"
simplekml = "^1.3.6"
wrapt = "^1.16.0"

[tool.poetry.group.dev.dependencies]
atomicwrites = "^1.4.1"
mypy = "^1.9.0"
pre-commit = "^3.7.0"
pyfakefs = "^5.4.1"
pyinstaller = "^6.6.0"
pytest = "^8.1.1"
pytest-cache = "^1.0"
pytest-cov = "^5.0.0"
pytest-dependency = "^0.6.0"
pytest-mock = "^3.14.0"

[tool.poetry.group.docs.dependencies]
recommonmark = "^0.7.1"
requests = "^2.31.0"
sphinx = "^7.3.7"
sphinx-rtd-theme = "^1.2.0"
sphinxcontrib-images = "^0.9.4"
sphinxcontrib-mermaid = "^0.9.2"
sphinxcontrib-napoleon = "^0.7"

[tool.poetry.group.lint.dependencies]
black = "^24.4.0"
darglint = "^1.8.1"
types-PyYAML = "^6.0.12.20240311"
types-pillow = "^10.2.0.20240415"
types-Jinja2 = "^2.11.9"

[tool.poetry.scripts]
xleapp = "xleapp.cli:cli"

[tool.ruff]
format = "grouped"
line-length = 90
target-version = "py310"
fix = true
unfixable = ["E711"]

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # flake8-2020
  "YTT",
  # flake8-bugbear
  "B",
  # flake8-quotes
  "Q",
  # pylint
  "PLE", "PLR", "PLW",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
  # type-checking imports
  "TCH",
]

# exclude chat_rendering.py until tested/fixed
exclude = [
  "chat_rendering.py"
]

# A003: ignore shared variables in a class
# D107: don't need docstrings for __init__ method of classes.
#       Infavor of documenting at the top of classes instead of inside __init__ methods.
# D203: 1 blank line required before class docstring.
# E203: Whitespace before ":"
# W503: Line breaks should occur after the binary operator to keep
#       all variable names aligned. Disabled infavor of W504 (PEP8 updates)
# Q000: Remove bad quotes
# PLR2004: Magic value used in comparison, consider replacing 10 with a constant variable
# PLR0913: Too many arguments to function call
ignore = [
  "A003",
  "D107",
  "D203",
  # "E203",  # not yet implemented
  "E501",
  # "W503",  # not yet implemented,
  "PLR0913"
]

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401", "E501"]
"**/gui/gui.py" = ["C901", "PLW0603", "PLR0912", "PLR0915"]
"**/types.py" = ["F401"]
"**/gui/log.py" = ["PLW0603"]
"docs/**" = ["E"]
"tests/**" = ["S101", "D107", "PLR0913", "PLR2004"]

[tool.pylint.messages_control]
max-line-length = 90
disable = [
 # intentionally turned off
  "bad-mcs-classmethod-argument",
  "broad-except",
  "c-extension-no-member",
  "comparison-with-itself",
  "consider-using-enumerate",
  "import-error",
  "import-outside-toplevel",
  "invalid-name",
  "invalid-unary-operand-type",
  "line-too-long",
  "logging-fstring-interpolation",
  "no-else-continue",
  "no-else-raise",
  "no-else-return",
  "no-member",
  "no-name-in-module",
  "not-an-iterable",
  "overridden-final-method",
  "pointless-statement",
  "redundant-keyword-arg",
  "singleton-comparison",
  "too-many-ancestors",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-function-args",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-public-methods",
  "too-many-return-statements",
  "too-many-statements",
  "unexpected-keyword-arg",
  "ungrouped-imports",
  "unsubscriptable-object",
  "unsupported-assignment-operation",
  "unsupported-membership-test",
  "unused-import",
  "use-dict-literal",
  "use-implicit-booleaness-not-comparison",
  "use-implicit-booleaness-not-len",
  "useless-import-alias",
  "wrong-import-order",
  "wrong-import-position",

 # misc
  "abstract-class-instantiated",
  "no-value-for-parameter",
  "undefined-variable",
  "unpacking-non-sequence",
  "used-before-assignment",

 # pylint type "C": convention, for programming standard violation
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "superfluous-parens",
  "too-many-lines",
  "unidiomatic-typecheck",
  "unnecessary-dunder-call",
  "unnecessary-lambda-assignment",

  # pylint type "R": refactor, for bad code smell
  "consider-using-with",
  "cyclic-import",
  "duplicate-code",
  "inconsistent-return-statements",
  "redefined-argument-from-local",
  "too-few-public-methods",

  # pylint type "W": warning, for python specific problems
  "abstract-method",
  "arguments-differ",
  "arguments-out-of-order",
  "arguments-renamed",
  "attribute-defined-outside-init",
  "broad-exception-raised",
  "comparison-with-callable",
  "dangerous-default-value",
  "deprecated-module",
  "eval-used",
  "expression-not-assigned",
  "fixme",
  "global-statement",
  "invalid-overridden-method",
  "keyword-arg-before-vararg",
  "possibly-unused-variable",
  "protected-access",
  "raise-missing-from",
  "redefined-builtin",
  "redefined-outer-name",
  "self-cls-assignment",
  "signature-differs",
  "super-init-not-called",
  "try-except-raise",
  "unnecessary-lambda",
  "unspecified-encoding",
  "unused-argument",
  "unused-variable",
  "using-constant-test"
]

[tool.ruff.isort]
lines-after-imports = 2
lines-between-types = 1

[tool.black]
line_length = 90
include = '\.pyi?$'
target_version = ["py310"]
exclude = '''
/(
    | \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
)/
'''

[tool.pyright]
pythonVersion = "3.10"
typeCheckignMode = "basic"
include = ["src/xleapp"]
exclude = [
  "**/__pycache__",
  "src/xleapp/tests",
  "src/xleapp/report/chat_rendering.py"
]
defineConstant = { DEBUG = true }

# enable subset of "strict"
reportDuplicateImport = true
reportInvalidStubStatement = true
reportOverlappingOverload = true
reportPropertyTypeMismatch = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedImport = true
# disable subset of "basic"
reportGeneralTypeIssues = false
reportMissingModuleSource = false
reportOptionalCall = false
reportOptionalIterable = false
reportOptionalMemberAccess = false
reportOptionalOperand = false
reportOptionalSubscript = false
reportPrivateImportUsage = false
reportUnboundVariable = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-vv --cov=xleapp --cov-report xml --cov-report html --ignore=data"
testpaths = [
  "tests",
]
doctest_optionflags = [
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
  "ELLIPSIS",
]
